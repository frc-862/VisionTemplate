import libjevois as jevois
import cv2
import numpy as np
import math
import time
import os
from enum import Enum

class Template:
    """
    An OpenCV pipeline generated by GRIP.
    """

    ## Constructor
    def __init__(self):
        jevois.LINFO("Preseason2019 Constructor")
        # Instantiate a JeVois Timer to measure our processing framerate:
        self.timer = jevois.Timer("sandbox", 100, jevois.LOG_INFO)
        """initializes all values to presets or None if need to be set
        """
        self.__hsl_threshold_hue = [0, 255.0]
        self.__hsl_threshold_saturation = [0, 255.0]
        self.__hsl_threshold_luminance = [0, 255.0]

        self.hsl_threshold_output = None

        self.__find_contours_input = self.hsl_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 0.0
        self.__filter_contours_min_perimeter = 0
        self.__filter_contours_min_width = 0
        self.__filter_contours_max_width = 1000
        self.__filter_contours_min_height = 0
        self.__filter_contours_max_height = 1000
        self.__filter_contours_solidity = [0, 100]
        self.__filter_contours_max_vertices = 1000000
        self.__filter_contours_min_vertices = 0
        self.__filter_contours_min_ratio = 0
        self.__filter_contours_max_ratio = 1000

        self.filter_contours_output = None
        
        try:
            fInit = open("modules/Lightning/Template/vals.txt", "r")
            if(fInit.mode == "r"):
                valsInit = fInit.read().split('[')[1].split(',')
                self.__hsl_threshold_hue[0] = float(valsInit[0])
                self.__hsl_threshold_hue[1] = float(valsInit[1])
                self.__hsl_threshold_saturation[0] = float(valsInit[2])
                self.__hsl_threshold_saturation[1] = float(valsInit[3])
                self.__hsl_threshold_luminance[0] = float(valsInit[4])
                self.__hsl_threshold_luminance[1] = float(valsInit[5])
                self.__filter_contours_min_area = float(valsInit[6])
            fInit.close()
        except:
            jevois.LINFO("Error loading parameters from file")
            
            
        self.sendFrames = True

        jevois.LINFO("END CONSTRUCTOR")
        
    ## Process function with USB output
    def process(self, inframe, outframe = None):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSL_Threshold0:
        self.bgr_input = inframe.getCvBGR()
        self.__hsl_threshold_input = self.bgr_input
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input, self.__hsl_threshold_hue, self.__hsl_threshold_saturation, self.__hsl_threshold_luminance)

        # Step Find_Contours0:
        self.__find_contours_input = self.hsl_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input, self.__find_contours_external_only)

        # Step Filter_Contours0:
        self.__filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(self.__filter_contours_contours, self.__filter_contours_min_area, self.__filter_contours_min_perimeter, self.__filter_contours_min_width, self.__filter_contours_max_width, self.__filter_contours_min_height, self.__filter_contours_max_height, self.__filter_contours_solidity, self.__filter_contours_max_vertices, self.__filter_contours_min_vertices, self.__filter_contours_min_ratio, self.__filter_contours_max_ratio)
        
        outimg = self.bgr_input
        cv2.putText(outimg, "Template Module", (3, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1, cv2.LINE_AA)
        cv2.drawContours(outimg, self.filter_contours_output, -1, (0, 0, 255), 3)
        
        
        outframe.sendCvBGR(outimg)
        

    # ###################################################################################################
    ## Parse a serial command forwarded to us by the JeVois Engine, return a string
    def parseSerial(self, input):
        jevois.LINFO('parseserial received command [{}]'.format(input))
        command = input.split(' ', 1)[0]
        if command == 'getVals':
            return self.getVals()
        if command == 'setHMin':
            return self.setHMin(input)
        if command == 'setHMax':
            return self.setHMax(input)
        if command == 'setSMin':
            return self.setSMin(input)
        if command == 'setSMax':
            return self.setSMax(input)
        if command == 'setLMin':
            return self.setLMin(input)
        if command == 'setLMax':
            return self.setLMax(input)
        if command == 'setMinArea':
            return self.setMinArea(input)
        if command == 'saveParams':
            return self.saveParams(input)
        if command == 'stopSendFrames':
            return self.stopPrintFrames()
        if command == 'sendFrames':
            return self.printFrames()
        if command == 'showHSL':
            self.displayHSLOutput = True;
            return 'Showing HSL output'
        if command == 'showContour':
            self.displayHSLOutput = False;
            return 'Showing contour output'
        return 'ERR: Unknown command'
    #http://jevois.org/qa/index.php?qa=527&qa_1=updating-parameters-in-a-python-module-via-serial
    # ###################################################################################################
    ## Return a string that describes the custom commands we support, for the JeVois help message
    def supportedCommands(self):
        # use \n seperator if your module supports several commands
        return ('getVals - return HSL and camera parameters' + 
        '\nsetHMin - set minimum hue' + 
        '\nsetHMax - set maximum hue' + 
        '\nsetSMin - set minimum saturation' + 
        '\nsetSMax - set maximum saturation' + 
        '\nsetLMin - set minimum luminance' + 
        '\nsetLMax - set maximum luminance' + 
        '\nsetMinArea - set minimum area' + 
        '\nsaveParams - save current parameters to file' + 
        '\nstopSendFrames - stop sending data frames to the serial port' + 
        '\nsendFrames - resume outputting frames to serial')
    
    def getVals(self):
        fGetExp = open('modules/Lightning/Template/vals.txt', 'r')
        exp = fGetExp.read().split('[')[1].split(',')[7]
        fGetExp.close()
        return ('Hue. . . . . ' + str(self.__hsl_threshold_hue[0]) + ' - ' + str(self.__hsl_threshold_hue[1]) + 
        '\nSaturation . ' + str(self.__hsl_threshold_saturation[0]) + ' - ' + str(self.__hsl_threshold_saturation[1]) + 
        '\nLuminance. . ' + str(self.__hsl_threshold_luminance[0]) + ' - ' + str(self.__hsl_threshold_luminance[1]) + 
        '\nMin Area . . ' + str(self.__filter_contours_min_area) + 
        '\n[' + str(self.__hsl_threshold_hue[0]) + ',' + str(self.__hsl_threshold_hue[1]) + 
        ',' + str(self.__hsl_threshold_saturation[0]) + ',' + str(self.__hsl_threshold_saturation[1]) + 
        ',' + str(self.__hsl_threshold_luminance[0]) + ',' + str(self.__hsl_threshold_luminance[1]) + 
        ',' + str(self.__filter_contours_min_area) + 
        ',' + exp + ', ')
        
    def stopPrintFrames(self):
        self.sendFrames = False
        return 'Not sending frames'
    
    def printFrames(self):
        self.sendFrames = True
        return 'Sending frames'
    
    def setHMin(self, command):
        arg = ''
        arg = command.split(' ')[1]
        if float(arg) < 0:
            return 'ERR: Value too low. Must be at least 0.'
        if float(arg) > self.__hsl_threshold_hue[1]:
            return 'ERR: Value too high. Must be below ' + str(self.__hsl_threshold_hue[1])
        self.__hsl_threshold_hue[0] = float(arg)
        return 'Hue min set to ' + arg
    def setHMax(self, command):
        arg = ''
        arg = command.split(' ')[1]
        if float(arg) > 255:
            return 'ERR: Value too high. Must be below 255'
        if float(arg) < self.__hsl_threshold_hue[0]:
            return 'ERR: Value too low. Must be greater than ' + str(self.__hsl_threshold_hue[0])
        self.__hsl_threshold_hue[1] = float(arg)
        return 'Hue max set to ' + arg
    def setSMin(self, command):
        arg = ''
        arg = command.split(' ')[1]
        if float(arg) < 0:
            return 'ERR: Value too low. Must be at least 0.'
        if float(arg) > self.__hsl_threshold_saturation[1]:
            return 'ERR: Value too high. Must be below ' + str(self.__hsl_threshold_saturation[1])
        self.__hsl_threshold_saturation[0] = float(arg)
        return 'Saturation min set to ' + arg
    def setSMax(self, command):
        arg = ''
        arg = command.split(' ')[1]
        if float(arg) > 255:
            return 'ERR: Value too high. Must be below 255'
        if float(arg) < self.__hsl_threshold_saturation[0]:
            return 'ERR: Value too low. Must be greater than ' + str(self.__hsl_threshold_saturation[0])
        self.__hsl_threshold_saturation[1] = float(arg)
        return 'Saturation max set to ' + arg
    def setLMin(self, command):
        arg = ''
        arg = command.split(' ')[1]
        if float(arg) < 0:
            return 'ERR: Value too low. Must be at least 0.'
        if float(arg) > self.__hsl_threshold_luminance[1]:
            return 'ERR: Value too high. Must be below ' + str(self.__hsl_threshold_luminance[1])
        self.__hsl_threshold_luminance[0] = float(arg)
        return 'Value min set to ' + arg
    def setLMax(self, command):
        arg = ''
        arg = command.split(' ')[1]
        if float(arg) > 255:
            return 'ERR: Value too high. Must be below 255'
        if float(arg) < self.__hsl_threshold_luminance[0]:
            return 'ERR: Value too low. Must be greater than ' + str(self.__hsl_threshold_luminance[0])
        self.__hsl_threshold_luminance[1] = float(arg)
        return 'Value max set to ' + arg
    def setMinArea(self, command):
        arg = ''
        arg = command.split(' ')[1]
        self.__filter_contours_min_area = float(arg)
        return 'Min area set to ' + arg
    def saveParams(self, command):
        exp = ''
        exp = command.split(' ')[1]
        redbal = command.split(' ')[2]
        bluebal = command.split(' ')[3]
        f = open("modules/Lightning/Template/vals.txt", "w+")
        f.write("h: " + str(self.__hsl_threshold_hue[0]) + "-" + str(self.__hsl_threshold_hue[1]) + "\r\n")
        f.write("s: " + str(self.__hsl_threshold_saturation[0]) + "-" + str(self.__hsl_threshold_saturation[1]) + "\r\n")
        f.write("l: " + str(self.__hsl_threshold_luminance[0]) + "-" + str(self.__hsl_threshold_luminance[1]) + "\r\n")
        f.write("[" + str(self.__hsl_threshold_hue[0]) + "," + str(self.__hsl_threshold_hue[1]) + 
        "," + str(self.__hsl_threshold_saturation[0]) + "," + str(self.__hsl_threshold_saturation[1]) + 
        "," + str(self.__hsl_threshold_luminance[0]) + "," + str(self.__hsl_threshold_luminance[1]) + 
        "," + str(self.__filter_contours_min_area) + "," + exp + ",\r\n")
        f.close()
        fParams = open('/jevois/config/initscript.cfg', 'w+')
        fParams.write('# JeVois initialization script\r\n')
        fParams.write('#\r\n')
        fParams.write('# This script is run upon statup of the JeVois main engine. You can here specify commands (like you would type them to\r\n')
        fParams.write('# the JeVois command-line interface) to execute upon startup, even before a module is loaded.\r\n')
        fParams.write('\r\n')
        fParams.write('# Example: load the SaveVideo with no USB out module (check its mapping index, it was 0 at the time of writing this),\r\n')
        fParams.write('# start streaming, and start saving:\r\n')
        fParams.write('setmapping2 YUYV 352 288 30.0 JeVois PythonSandbox\r\n')
        fParams.write('#setpar serlog Hard\r\n')
        fParams.write('#setpar serout Hard\r\n')
        fParams.write('#setpar serlog USB\r\n')
        fParams.write('setpar serout USB\r\n')
        fParams.write('setcam autowb 0\r\n')
        fParams.write('setcam autoexp 1\r\n')
        fParams.write('setcam absexp ' + exp + '\r\n')
        fParams.write('setcam redbal ' + redbal + '\r\n')
        fParams.write('setcam bluebal ' + bluebal + '\r\n')
        fParams.write('\r\n')
        fParams.write('#streamon\r\n')
        fParams.write('\r\n')
        fParams.write('#start\r\n')
        fParams.close()
        return 'Saved parameters'

    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]),  (hue[1], lum[1], sat[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                        min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                        min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x,y,w,h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output

        